% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_permutation_pvals.R
\name{get_permutation_pvals}
\alias{get_permutation_pvals}
\title{Perform a permutation analysis}
\usage{
get_permutation_pvals(
  transcript_counts_table,
  cell_labels_table,
  transcript_id_colname,
  gene_id_colname,
  cell_labels_colname,
  permutations = 10000,
  cores = 0,
  do_gene_level_comparisons = FALSE,
  return_detailed_pvalue_tables = FALSE,
  cutoff = 0.1
)
}
\arguments{
\item{transcript_counts_table}{A dataframe with a column containing transcript IDs, a column with gene IDs for
each transcript, and counts for all transcripts in all cells, with cell IDs as subsequent column names.}

\item{cell_labels_table}{A dataframe with two columns: one listing all cell IDs, and the other listing the group
that the cell ID belongs to.}

\item{transcript_id_colname}{A string corresponding to the column name in \code{transcript_counts_table} where the transcript IDs are stored.}

\item{gene_id_colname}{A string corresponding to the column name in \code{transcript_counts_table} where the gene IDs are stored.}

\item{cell_labels_colname}{A string corresponding to the column name in \code{cell_labels_table} where the group information is stored.}

\item{permutations}{An integer corresponding to the number of permutations that should be run. Default 10000. Note that the first p-value calculation
is performed on the original set of data, and label shuffling occurs from permutation 2 and onwards. If only 1 permmutation is chosen, the
output p-values will be the chi-squared p-values.}

\item{cores}{An integer representing the number of cores that the function should attempt to use. If left undefined, set to 0, or set
to more cores than are available, defaults to all available cores. A good starting point is to allocate at least N cores, where
N = (number of cell groupings * 2). The function will run at varying degrees of reduced speed if this threshold isn't met.}

\item{do_gene_level_comparisons}{If set to \code{TRUE}, also runs a permutation analysis on gene level differences. A significant value indicates that
there is a difference in transcript proportions visible at the gene level, but does not specify which transcripts show the change within the gene.}

\item{return_detailed_pvalue_tables}{If set to \code{TRUE}, an additonal list of dataframes will be returned containing additional information on
p-values generated over the permutations. If you'd like to look into p-value distributions over the permutations, this must be set to \code{TRUE}.
Note that if this is set to \code{TRUE}, the resulting object generated will be very large (normally ~100GB), and therefore this option is only
recommended for further (usually unnecessary) inspection.}

\item{cutoff}{A \code{double} (decimal) indicating the initial p-value cutoff that isoforms (and genes if gene-level comparison is enabled) must pass to be included
in subsequent permutations. This cutoff applies for the first permutation only, and potentially increases the speed of each permutation by filtering down
data before calculations begin. With higher cutoffs, less data is filtered. To disable filtering, set the cutoff to 1. Defaults to \code{0.1}.}
}
\value{
A \code{list} of four objects: the first is a list dataframes containing p-values for each permutation, for each group.
The second is a list of dataframes that describe the values used in pvalue calculation for every transcript, for each group,
only on the initial run (while tables were not permuted). The third is \code{NA} if \code{return_detailed_pvalue_tables}
is set to \code{FALSE}, otherwise it contains additional information on the p-values for each permutation. The fifth is also \code{NA} if
\code{do_gene_level_comparisons} is set to \code{FALSE}, but otherwise contains a dataframe with permutation p-values for gene level transcript
proportion differences (see the description for do_gene_level_commparisons).
}
\description{
Performs a permutation analysis using repeated chi-squared measures of significance, while shuffling cell grouping designations
between each permutation. Should be run a minimum of 10,000 times to guarantee consistency in results.
}
\examples{
counts_table <- data.frame('transcript_id' = c(1, 2, 3), 'gene_id' = c(1, 1, 2), 'Cell_1' = c(0, 1, 10), 'Cell_2' = c(10, 2, 5), 'Cell_3' = c(2, 5, 1))
labels_table <- data.frame('grouping' = c('Cluster_1', 'Cluster_2', 'Cluster 1'), 'Cells' = c('Cell_1', 'Cell_2', 'Cell_3'))
permutation_results <- get_permutation_pvals(counts_table, labels_table, 'transcript_id', 'gene_id', 'grouping', 10000, 0, TRUE, FALSE, 6000, '/user/example/folder/')
}
